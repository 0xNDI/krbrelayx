from pyasn1.type import univ, char, namedtype, namedval, tag, constraint, useful
from impacket.krb5.asn1 import _application_tag, _sequence_component, _sequence_optional_component, AP_REQ, AP_REP
from pyasn1.codec.der import decoder, encoder

MechTypes = {
    '1.3.6.1.4.1.311.2.2.10': 'NTLMSSP - Microsoft NTLM Security Support Provider',
    '1.2.840.48018.1.2.2': 'MS KRB5 - Microsoft Kerberos 5',
    '1.2.840.113554.1.2.2': 'KRB5 - Kerberos 5',
    '1.2.840.113554.1.2.2.3': 'KRB5 - Kerberos 5 - User to User',
    '1.3.6.1.4.1.311.2.2.30': 'NEGOEX - SPNEGO Extended Negotiation Security Mechanism'
}

TypesMech = dict((v,k) for k, v in MechTypes.iteritems())

class ContextFlags(univ.BitString):
    namedValues = namedval.NamedValues(
        ('delegFlag', 0),
        ('mutualFlag', 1),
        ('replayFlag', 2),
        ('sequenceFlag', 3),
        ('anonFlag', 4),
        ('confFlag', 5),
        ('integFlag', 6)
    )

class NegResult(univ.Enumerated):
    namedValues = namedval.NamedValues(
        ('accept_completed', 0),
        ('accept_incomplete', 1),
        ('reject', 2),
        ('request_mic', 3)
    )

class MechType(univ.ObjectIdentifier):
    pass


class MechTypeList(univ.SequenceOf):
    componentType = MechType()


class NegHints(univ.Sequence):
    componentType = namedtype.NamedTypes(
        _sequence_optional_component('hintName', 0, char.GeneralString()),
        _sequence_optional_component('hintAddress', 1, univ.OctetString())
    )


class NegTokenInit(univ.Sequence):
    componentType = namedtype.NamedTypes(
        _sequence_component('mechTypes', 0, MechTypeList()),
        _sequence_optional_component('reqFlags', 1, ContextFlags()),
        _sequence_optional_component('mechToken', 2, univ.OctetString()),
        _sequence_optional_component('mechListMIC', 3, univ.OctetString())
    )


class NegTokenInit2(univ.Sequence):
    """
    negTokenInit2 is a Microsoft extension of negTokenInit, initiating SPNEGO from the server
    See [MS-SPNG] for details. The negHints field should always contain the hintname
    "not_defined_in_RFC4178@please_ignore"
    """
    componentType = namedtype.NamedTypes(
        _sequence_component('mechTypes', 0, MechTypeList()),
        _sequence_optional_component('reqFlags', 1, ContextFlags()),
        _sequence_optional_component('mechToken', 2, univ.OctetString()),
        _sequence_optional_component('negHints', 3, NegHints()),
        _sequence_optional_component('mechListMIC', 4, univ.OctetString())
    )

class NegTokenResp(univ.Sequence):
    componentType = namedtype.NamedTypes(
        _sequence_optional_component('negResult', 0, NegResult()),
        _sequence_optional_component('supportedMech', 1, MechType()),
        _sequence_optional_component('responseToken', 2, univ.OctetString()),
        _sequence_optional_component('mechListMIC', 3, univ.OctetString())
    )

class NegotiationToken(univ.Choice):
    componentType = namedtype.NamedTypes(
        namedtype.NamedType('negTokenInit', NegTokenInit().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),
        namedtype.NamedType('negTokenResp', NegTokenResp().subtype(explicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))
    )

class GSSAPIHeader_SPNEGO_Init(univ.Sequence):
    """
    GSSAPI Header containing SPNEGO negTokenInit or negTokenResp
    """
    tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 0))
    componentType = namedtype.NamedTypes(
        namedtype.NamedType('tokenOid', univ.ObjectIdentifier()),
        namedtype.NamedType('innerContextToken', NegotiationToken())
    )

class GSSAPIHeader_SPNEGO_Init2(univ.Sequence):
    """
    GSSAPI Header containing SPNEGO negTokenInit2
    negTokenInit2 is a Microsoft extension, initiating SPNEGO from the server
    See [MS-SPNG] for details
    """
    tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 0))
    componentType = namedtype.NamedTypes(
        namedtype.NamedType('tokenOid', univ.ObjectIdentifier()),
        _sequence_component('innerContextToken', 0, NegTokenInit2())
    )

class GSSAPIHeader_KRB5_AP_REQ(univ.Sequence):
    tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 0))
    componentType = namedtype.NamedTypes(
        namedtype.NamedType('tokenOid', univ.ObjectIdentifier()),
        # Actualy this is a constant 0x0001, but this decodes as an asn1 boolean
        namedtype.NamedType('krb5_ap_req', univ.Boolean()),
        namedtype.NamedType('apReq', AP_REQ()),
    )

class GSSAPIHeader_KRB5_AP_REP(univ.Sequence):
    tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 0))
    componentType = namedtype.NamedTypes(
        namedtype.NamedType('tokenOid', univ.ObjectIdentifier()),
        # Actualy this is a constant 0x0002, but this decodes as an asn1 integer
        namedtype.NamedType('krb5_ap_rep', univ.Integer()),
        namedtype.NamedType('apRep', AP_REP()),
    )
from pyasn1 import debug

def test():
    import binascii
    data = binascii.unhexlify('60820c3306062b0601050502a0820c2730820c23a030302e06092a864882f71201020206092a864886f712010202060a2b06010401823702021e060a2b06010401823702020aa2820bed04820be960820be506092a864886f71201020201006e820bd430820bd0a003020105a10302010ea20703050020000000a382049f6182049b30820497a003020105a10f1b0d494e5445524e414c2e434f5250a2293027a003020102a120301e1b04636966731b1649434f52502d44432e696e7465726e616c2e636f7270a38204523082044ea003020112a103020104a28204400482043ce3b540556cdf2ce2ac675dc9fa2f6b3112e8209c246636d535926b59f0023eebcd8d4895ce87069097e6e33d0b63331ad64a9e76635f7675c88dfa9a034c761ba0ef45dc2f999f3127ca78100695b9a1bedceab764f2b0d4ede0b4cb46d2d93f6f494706d9a7d107b42eccf0a9c95383a4e20c8171556efacfe55361e65870cdf80b38527e948efcd196a9282e90ffdc5404bd3582c692724e9f0e2970ee242ae8dd0de7e93e7bced8d8ad8915e5cd9b286e9636aa809629579e77bf72f88dc8e669106e2d8fdfbbf37c114ef0706c906ce037d7c0cc3bd10d9c60c30e29994481539b3bbe550aa791394b60f09a844667a016275e00642254083528535563e9ea3ef83d512a30bf2660f17e0222c7ec158e0ca091861c3043f15a109ad31fe30a94bf81012921896068d77dbf7a7fe23bf278ea88d0fb0fddf7bcc3f4adbac47fb6f9b6675fc60ade851ab632a117ecbbdaef31c3ca87c0a54dc74268823114344f356af9b51c3639bafd0c441fc5c6d692939a3b422041e6c769f0cc7f23a023dfc017390cf78843668060eba8c99a2dfa8ad99bff56ccecf95d3a1b70abed1f0ccec41126590abf1ac9d7339f504ea4602f95a1522b341092f68fd3f9c986f6c692b7e070ec36f5a77264cf4a7a34475184da181ea27a937716f1d5728e585c99db2b24053964e3e12bdb13e6946a8737278f2287db7f940e3a279242fb09ffc1b13fb97cf46632848f6012bfd924e7fa20c5f475401487f3eec95be224272125950dcc936c23a5a129349494992b3e59c50b5d3967a61ddfa66d5b71f991c0c0236522a2888494ca5cb98aad8ab15ad4b2968f603364679552b26937968f94b5c2259b96a8e1d562315290119079e4936f21c60fadf203d47ea14f3fd6dc3465479c59f975aea1568826b19edf06d59e97980a24d60fe170267f3ebd76f5005b59ce26c689b80ce3138d5a524fbe5834ec5c01d7c45bfa35e97195be3977661e6354fc65a5a7526cb02e9dbdab037dd0a53ec133f17b2afacfec399a7016ca43552827e7f873fa92f8be943bfb6bcbdc980437d0f7b4e09528b588607c1f1331784f69f6b3d08d494476098f735a5e883fcdafdd96977cb44c4e102ef90957e192ca1d569b1183313f781ec3d0c5d7ee7efee86fd5420f25ad7629152c303e056b4e6f2d2322da275115eeabfefceeba66c42991d596915dff2faaaafc1ab61d4f123eb1905faeb64025fcf4e4189385ab6663b412c40ae88791564e54daa15501b9da7a242b375e766fb150a1ed613e8df49f2938094f8562d20a03d8b8b303d7fa13b55f93c8570159c1f81055daf695f162d567399f9b0314e7dcb60c4780297743e253d743a2ad525352496309561216b33c7e6d62a88257ad3762df2fdf85e799844975504b57ea029cd861431678a86eb46c6768d95cef58161071b4d876fa68cf2e849aa2109d5398c088e495f2b1d5625c53dd128b088929d90ee8d86f087deb40c2690f901b797ae85517de61d2dbb4702a1299bb46a482071630820712a003020112a282070904820705fb5cc82e31c2324ed84253d212f23996e14ce59f1de4aeb3714470259a5b954de39ce4e6d23f274b2b53731c5d52f743068bd1bab5460ee3e3e0fc365f7f30ebcc910acf5a3a85d4f2c6fee282d24aeb23493aad26459671c2d137010ab000097ec6a4efe7ecce07e8f9a7a003b3f34d531550aea830b5bff9a9437236850b21fe557cd2a475437cc7a01370d7aeb8dafcfefde76d2402023f4dad87709ff165502682b204f781f680a0f750cf6d5d9be6b99a67b9d7b48bd07996dfc2fd002235aa76a26a6a5a46238dce42d0446681da4ef43f066842af41429799b8239bc461cbfae5282b0f2a15c6d86c1ab1998a30b43ff02cc769a0591d266a0901d5236087d0b032bb94468270e3dde4c9027e24f6e6c9f328d885abf248b7444c9c11d14194f2f481998d4daef19060ea2f48e3c2d8467a30c982dda092bccc6287275848389759c87b012d1ef0600ca9fcf04686333960ea91e9c17ae4b881e7385d96a3d9132cfb67feddcac3166790ed4855589a514c2acd181adda62dcbb79be3995d8e3ce6728d28d5b4dc0d6ab8635046ed8544a277d74de2f17ad6ae7c527e8eba35ef7c33fea2dc1803de72f14429403594876684184cd4c4bed11e937e004685badaf71c308e830fadb2893c3c591e116192c61bff09f4ecbf3a8ce9d762eff48ca9fd36f35e928e27e7141d13d4d21173e9a9aa74580ada1042831cac2b1ba15b4092afc8229fc237b710804ac9c633db4d88c2bb2209f640c4efa895f7cc05fb6d567644073173b8c63e16b54bb0bb78585a5f9982001943d0b25b65804ef184d80bd1fe851cdcf0800c34d41415904577f6cee1041157b6d02dff7079ec42fef1e1bbfecfe3e2f533ad69262523519dada1b4fbe9c2250c2f4a4ac2a6013fef8aa71df1bae566ebcbec8ee2ea5b443f7581ac052f709541e77a3c9a22d507c5601702ea30b7461fcd38b08df193ba7cf3549e94bf336f35fe19d97e129059e5e34e4b2a8596e4e7f6200c704c51b6c7273d2d320811cbc16657e5eb1116f05d281c1277f18d4cce278ff2ef7deceb423274be8209d363d1584e305f8578e628e7fdc65a881979d6202cd068319594e975d52078eee0bc047ddc999b5e3da70ae6617459d6d412b4554e6f23d38b80de12f7da8a9c0084f6048c8f58d44a4364136c80fd45afec5ac9275ac1b74814202ae314f4347c5f396aa7979c46ae8003d6aad7120f8359043f2d94de6126db41d71006ca32fe45f885fd7dc238e2936dd98a416b8b2820cf706b9e11e974517f92f2d313976ec38fea665963d065a9b8e75d3854cdd1a1e19419c77d6c3b8b8f96f05b62088112f53b441ff0e172dce8fe2712fbec144de7d47fc9038f83f7eb2242f8fd201c5f24abdc98d310d86987550b581a4362706221d2fae2ac8a65427ea2cfa02509093055dcd41b33e74ec4a5d77b42e12035f6e3a340bfd81a31316f432e88bd917807993400321a3db2d6d782ead9f8bfa8acaed50e8f2938c50db7019a33f6c9861f6d65ff10d7e06021f4ec0618d0644753860a5d0ce534c38c7c35c4e9632d5170cb30e7642289a4cc272eb7dbfdbe71a594a733c4bd10371878c5be231e23195473a23dad685bcd77b9aea3305e489eac339587a1d217450958fcf9e012855e693aedee68247b7d08383eef5317f27c063b8e8d5596f11e67615be8ab14ed7e04ebe9de3deb36a5b25e23f3969121be8a5225cc012b558700a59840acd2fad7cd5ccaf9cae88d782c9d35cd0219949872ab0f4df16162558d2724141d869a502b6a665eb9d7762f9a056382139a25fcee8d302fc2db9b6d1fa2cf4b4c20543bd3516c72240b00bacfc045c74362d84a0caf53be528a088e000c0d533de518e970eaaff57aae16b89de458d4383cae44cb1c8172902b3298693a3145e3d5f80a5d86c22a99afd6ebbf89151bbb2213b77169ab823a207501218b3d838babc9105c095cdad7308e92b12ce31e17252d8020fd2b2b87fa62ab6c0a184705c6865cde6c0c56faa553553dd1cde70e1e52995c51b3a4c496074814eb0f6abc45917412217be5ec3105f9a6413d8d2657f2f7f6d3329fce131e5201c61b2054721c3b72f01d82b72c9a1586c37f93da524f5216a16ac91c3f1c1297042947b0e398260f24532c2073384c2f5368a9784af03120e262a0c1bb797f3a45addb446f172fb1c5b7e9c768378671159d5be93240ce891eb214a38a1b8303c6e68d5f03cb1b7d18e68a9a6f5ece67052a577aa80e1c1e7f2b73e188ba91ec740e0793e83599b8608df7ff6a2b3f1f6a4341d6ccf1d03709834d4eeaef462d5245a9b44bb2b29ee63624745858545a1c12adcde88ef196118863a0302bb747be3185206579019175d14445e69a5f672eb2a9b7b19d2ce5213e0a302bb76454d6af570e5e4ec3d3e85109609894a55435e9885c6baa5afb60a092dd35a86284a1983c8948faffcba194ce2309e1261022ed7e4ce84bffe061842271f84c3f4fe974f87a747b8ca557cce7042a1fe40da96f')
    out = decoder.decode(data, asn1Spec=GSSAPIHeader_SPNEGO_Init())
    print str(out[0])
    # out[0].prettyPrint()
    data2 = out[0]['innerContextToken']['negTokenInit']['mechToken']
    # data2 = binascii.unhexlify('60820be506092a864886f71201020201006e820bd430820bd0a003020105a10302010ea20703050020000000a382049f6182049b30820497a003020105a10f1b0d494e5445524e414c2e434f5250a2293027a003020102a120301e1b04636966731b1649434f52502d44432e696e7465726e616c2e636f7270a38204523082044ea003020112a103020104a28204400482043ce3b540556cdf2ce2ac675dc9fa2f6b3112e8209c246636d535926b59f0023eebcd8d4895ce87069097e6e33d0b63331ad64a9e76635f7675c88dfa9a034c761ba0ef45dc2f999f3127ca78100695b9a1bedceab764f2b0d4ede0b4cb46d2d93f6f494706d9a7d107b42eccf0a9c95383a4e20c8171556efacfe55361e65870cdf80b38527e948efcd196a9282e90ffdc5404bd3582c692724e9f0e2970ee242ae8dd0de7e93e7bced8d8ad8915e5cd9b286e9636aa809629579e77bf72f88dc8e669106e2d8fdfbbf37c114ef0706c906ce037d7c0cc3bd10d9c60c30e29994481539b3bbe550aa791394b60f09a844667a016275e00642254083528535563e9ea3ef83d512a30bf2660f17e0222c7ec158e0ca091861c3043f15a109ad31fe30a94bf81012921896068d77dbf7a7fe23bf278ea88d0fb0fddf7bcc3f4adbac47fb6f9b6675fc60ade851ab632a117ecbbdaef31c3ca87c0a54dc74268823114344f356af9b51c3639bafd0c441fc5c6d692939a3b422041e6c769f0cc7f23a023dfc017390cf78843668060eba8c99a2dfa8ad99bff56ccecf95d3a1b70abed1f0ccec41126590abf1ac9d7339f504ea4602f95a1522b341092f68fd3f9c986f6c692b7e070ec36f5a77264cf4a7a34475184da181ea27a937716f1d5728e585c99db2b24053964e3e12bdb13e6946a8737278f2287db7f940e3a279242fb09ffc1b13fb97cf46632848f6012bfd924e7fa20c5f475401487f3eec95be224272125950dcc936c23a5a129349494992b3e59c50b5d3967a61ddfa66d5b71f991c0c0236522a2888494ca5cb98aad8ab15ad4b2968f603364679552b26937968f94b5c2259b96a8e1d562315290119079e4936f21c60fadf203d47ea14f3fd6dc3465479c59f975aea1568826b19edf06d59e97980a24d60fe170267f3ebd76f5005b59ce26c689b80ce3138d5a524fbe5834ec5c01d7c45bfa35e97195be3977661e6354fc65a5a7526cb02e9dbdab037dd0a53ec133f17b2afacfec399a7016ca43552827e7f873fa92f8be943bfb6bcbdc980437d0f7b4e09528b588607c1f1331784f69f6b3d08d494476098f735a5e883fcdafdd96977cb44c4e102ef90957e192ca1d569b1183313f781ec3d0c5d7ee7efee86fd5420f25ad7629152c303e056b4e6f2d2322da275115eeabfefceeba66c42991d596915dff2faaaafc1ab61d4f123eb1905faeb64025fcf4e4189385ab6663b412c40ae88791564e54daa15501b9da7a242b375e766fb150a1ed613e8df49f2938094f8562d20a03d8b8b303d7fa13b55f93c8570159c1f81055daf695f162d567399f9b0314e7dcb60c4780297743e253d743a2ad525352496309561216b33c7e6d62a88257ad3762df2fdf85e799844975504b57ea029cd861431678a86eb46c6768d95cef58161071b4d876fa68cf2e849aa2109d5398c088e495f2b1d5625c53dd128b088929d90ee8d86f087deb40c2690f901b797ae85517de61d2dbb4702a1299bb46a482071630820712a003020112a282070904820705fb5cc82e31c2324ed84253d212f23996e14ce59f1de4aeb3714470259a5b954de39ce4e6d23f274b2b53731c5d52f743068bd1bab5460ee3e3e0fc365f7f30ebcc910acf5a3a85d4f2c6fee282d24aeb23493aad26459671c2d137010ab000097ec6a4efe7ecce07e8f9a7a003b3f34d531550aea830b5bff9a9437236850b21fe557cd2a475437cc7a01370d7aeb8dafcfefde76d2402023f4dad87709ff165502682b204f781f680a0f750cf6d5d9be6b99a67b9d7b48bd07996dfc2fd002235aa76a26a6a5a46238dce42d0446681da4ef43f066842af41429799b8239bc461cbfae5282b0f2a15c6d86c1ab1998a30b43ff02cc769a0591d266a0901d5236087d0b032bb94468270e3dde4c9027e24f6e6c9f328d885abf248b7444c9c11d14194f2f481998d4daef19060ea2f48e3c2d8467a30c982dda092bccc6287275848389759c87b012d1ef0600ca9fcf04686333960ea91e9c17ae4b881e7385d96a3d9132cfb67feddcac3166790ed4855589a514c2acd181adda62dcbb79be3995d8e3ce6728d28d5b4dc0d6ab8635046ed8544a277d74de2f17ad6ae7c527e8eba35ef7c33fea2dc1803de72f14429403594876684184cd4c4bed11e937e004685badaf71c308e830fadb2893c3c591e116192c61bff09f4ecbf3a8ce9d762eff48ca9fd36f35e928e27e7141d13d4d21173e9a9aa74580ada1042831cac2b1ba15b4092afc8229fc237b710804ac9c633db4d88c2bb2209f640c4efa895f7cc05fb6d567644073173b8c63e16b54bb0bb78585a5f9982001943d0b25b65804ef184d80bd1fe851cdcf0800c34d41415904577f6cee1041157b6d02dff7079ec42fef1e1bbfecfe3e2f533ad69262523519dada1b4fbe9c2250c2f4a4ac2a6013fef8aa71df1bae566ebcbec8ee2ea5b443f7581ac052f709541e77a3c9a22d507c5601702ea30b7461fcd38b08df193ba7cf3549e94bf336f35fe19d97e129059e5e34e4b2a8596e4e7f6200c704c51b6c7273d2d320811cbc16657e5eb1116f05d281c1277f18d4cce278ff2ef7deceb423274be8209d363d1584e305f8578e628e7fdc65a881979d6202cd068319594e975d52078eee0bc047ddc999b5e3da70ae6617459d6d412b4554e6f23d38b80de12f7da8a9c0084f6048c8f58d44a4364136c80fd45afec5ac9275ac1b74814202ae314f4347c5f396aa7979c46ae8003d6aad7120f8359043f2d94de6126db41d71006ca32fe45f885fd7dc238e2936dd98a416b8b2820cf706b9e11e974517f92f2d313976ec38fea665963d065a9b8e75d3854cdd1a1e19419c77d6c3b8b8f96f05b62088112f53b441ff0e172dce8fe2712fbec144de7d47fc9038f83f7eb2242f8fd201c5f24abdc98d310d86987550b581a4362706221d2fae2ac8a65427ea2cfa02509093055dcd41b33e74ec4a5d77b42e12035f6e3a340bfd81a31316f432e88bd917807993400321a3db2d6d782ead9f8bfa8acaed50e8f2938c50db7019a33f6c9861f6d65ff10d7e06021f4ec0618d0644753860a5d0ce534c38c7c35c4e9632d5170cb30e7642289a4cc272eb7dbfdbe71a594a733c4bd10371878c5be231e23195473a23dad685bcd77b9aea3305e489eac339587a1d217450958fcf9e012855e693aedee68247b7d08383eef5317f27c063b8e8d5596f11e67615be8ab14ed7e04ebe9de3deb36a5b25e23f3969121be8a5225cc012b558700a59840acd2fad7cd5ccaf9cae88d782c9d35cd0219949872ab0f4df16162558d2724141d869a502b6a665eb9d7762f9a056382139a25fcee8d302fc2db9b6d1fa2cf4b4c20543bd3516c72240b00bacfc045c74362d84a0caf53be528a088e000c0d533de518e970eaaff57aae16b89de458d4383cae44cb1c8172902b3298693a3145e3d5f80a5d86c22a99afd6ebbf89151bbb2213b77169ab823a207501218b3d838babc9105c095cdad7308e92b12ce31e17252d8020fd2b2b87fa62ab6c0a184705c6865cde6c0c56faa553553dd1cde70e1e52995c51b3a4c496074814eb0f6abc45917412217be5ec3105f9a6413d8d2657f2f7f6d3329fce131e5201c61b2054721c3b72f01d82b72c9a1586c37f93da524f5216a16ac91c3f1c1297042947b0e398260f24532c2073384c2f5368a9784af03120e262a0c1bb797f3a45addb446f172fb1c5b7e9c768378671159d5be93240ce891eb214a38a1b8303c6e68d5f03cb1b7d18e68a9a6f5ece67052a577aa80e1c1e7f2b73e188ba91ec740e0793e83599b8608df7ff6a2b3f1f6a4341d6ccf1d03709834d4eeaef462d5245a9b44bb2b29ee63624745858545a1c12adcde88ef196118863a0302bb747be3185206579019175d14445e69a5f672eb2a9b7b19d2ce5213e0a302bb76454d6af570e5e4ec3d3e85109609894a55435e9885c6baa5afb60a092dd35a86284a1983c8948faffcba194ce2309e1261022ed7e4ce84bffe061842271f84c3f4fe974f87a747b8ca557cce7042a1fe40da96f')
    out = decoder.decode(data2, asn1Spec=GSSAPIHeader_KRB5_AP_REQ())
    print str(out[0])
    data3 = binascii.unhexlify('a181b53081b2a0030a0100a10b06092a864882f712010202a2819d04819a60819706092a864886f71201020202006f8187308184a003020105a10302010fa2783076a003020112a26f046d18b99d89dbfbd4bdf1d01f0e224436fee8f37091ca22382412f78e87f714763509a9a8135ead7a959ef013d0f877c7e6f48028902322925e9586bd060fd9f8dd012fa06d808a0e4c2ec8a876abbffba73ce4a90e6d5f20b2e737c8fc59df18f5f8cf8a7db0e48745cbe86e1fef')
    out = decoder.decode(data3, asn1Spec=NegotiationToken())
    print str(out[0])
    data4 = out[0]['negTokenResp']['responseToken']
    # debug.setLogger(debug.Debug('all'))

    out = decoder.decode(data4, asn1Spec=GSSAPIHeader_KRB5_AP_REP())
    print str(out[0])
    data5 = binascii.unhexlify('607606062b0601050502a06c306aa03c303a060a2b06010401823702021e06092a864882f71201020206092a864886f712010202060a2a864886f71201020203060a2b06010401823702020aa32a3028a0261b246e6f745f646566696e65645f696e5f5246433431373840706c656173655f69676e6f7265')
    out = decoder.decode(data5, asn1Spec=GSSAPIHeader_SPNEGO_Init2())
    print str(out[0])

    print str(out[0])

    nt = NegotiationToken()
    nt['negTokenResp']['negResult'] = 'request_mic'
    nt['negTokenResp']['supportedMech'] = TypesMech['KRB5 - Kerberos 5']
    print binascii.hexlify(encoder.encode(nt))
    data6 = binascii.unhexlify('a1153013a0030a0103a10c060a2b06010401823702020a')
    out = decoder.decode(data6, asn1Spec=NegotiationToken())
    print str(out[0])
# Process command-line arguments.
if __name__ == '__main__':
    test()